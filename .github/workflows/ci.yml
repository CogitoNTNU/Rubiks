# .github/workflows/format.yml
name: CI Pipeline

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]

permissions:
  contents: read

jobs:
  Setup:
    runs-on: ubuntu-latest

    outputs:
      cache-hit: ${{ steps.cache-dependencies.outputs.cache-hit }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v3
      with:
        python-version: "3.12"

    - name: Cache dependencies
      id: cache-dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pypoetry
        key: dependencies-${{ hashFiles('**/poetry.lock') }}
        restore-keys: dependencies-

    - name: Install dependencies
      if: steps.cache-dependencies.outputs.cache-hit != 'true'
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install poetry
        poetry install --with dev


  Formatting:
    runs-on: ubuntu-latest
    needs: Setup

    steps:
    - name: Reuse code from setup
      uses: actions/checkout@v4

    - name: Check import ordering with isort
      run: |
        cd backend
        poetry run isort . --check

    - name: Check code formatting with Black
      run: |
        cd backend
        poetry run black . --check

    - name: Report code formatting issues
      if: failure()
      run: |
        echo "Some code formatting issues were found."
        echo "Review the logs above for details."
        echo "To fix them, run 'poetry run black .' and 'poetry run isort .'."


  Linting:
    runs-on: ubuntu-latest
    needs: Setup

    steps:
    - name: Reuse code from setup
      uses: actions/checkout@v4

    # Blocking Pylint check for errors (E) and fatal issues (F)
    - name: Run blocking Pylint check
      run: |
        cd backend
        poetry run pylint . --rcfile=pyproject.toml --disable=all --enable=E,F

    # Non-blocking Pylint check for conventions and warnings (C, W)
    - name: Run non-blocking Pylint check
      run: |
        cd backend
        poetry run pylint . --rcfile=pyproject.toml --disable=E,F
      continue-on-error: true


  Test:
    runs-on: ubuntu-latest
    needs: Setup

    steps:
    - name: Reuse code from setup
      uses: actions/checkout@v4

    - name: Run tests with Pytest
      run: |
        cd backend
        poetry run pytest --disable-warnings --tb=short
      continue-on-error: ${{ github.ref != 'refs/heads/main' }}

    - name: Report test failures
      if: failure()
      run: |
        echo "Some tests failed. Review the logs above for details."
